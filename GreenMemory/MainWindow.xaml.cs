using System;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml;

namespace GreenMemory
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private const string SETTINGSFILEPATH = "memorySettings.xml";
        
        /// <summary>
        /// Constructor
        /// </summary>
        public MainWindow()
        {
            InitializeComponent();
            Tests.Run();

            (mainGrid.Children[0] as StartView).btnQuickStart.Click += ChangeState;
            (mainGrid.Children[0] as StartView).btnStart.Click += ChangeState;

            // TODO: Get settings from saved file or set to default.
            if (!readSettingsFromXML())
            {
                SettingsModel.Columns = 4;
                SettingsModel.Rows = 4;
                SettingsModel.AgainstAI = false;
            }
        }

        private void ChangeState(object sender, RoutedEventArgs e)
        {
            if (mainGrid.Children[0] is StartView)
            {
                if (sender == (mainGrid.Children[0] as StartView).btnQuickStart)
                {
                    mainGrid.Children.Remove(mainGrid.Children[0]);
                    mainGrid.Children.Add(new GameView());
                }
                else if (sender == (mainGrid.Children[0] as StartView).btnStart)
                {
                    mainGrid.Children.Remove(mainGrid.Children[0]);
                    mainGrid.Children.Add(new SettingsView());

                    (mainGrid.Children[0] as SettingsView).btnPlay.Click += ChangeState;
                }
            }
            else if (mainGrid.Children[0] is SettingsView)
            {
                if (sender == (mainGrid.Children[0] as SettingsView).btnPlay)
                {
                    mainGrid.Children.Remove(mainGrid.Children[0]);
                    mainGrid.Children.Add(new GameView());
                }
            }
        }

        /// <summary>
        /// Gets settings from an xml file. 
        /// File path specified in constant SETTINGSFILEPATH.
        /// </summary>
        /// <returns></returns>
        private bool readSettingsFromXML()
        {
            try
            {
                using (XmlReader reader = XmlReader.Create(SETTINGSFILEPATH))
                {
                    while(reader.Read())
                    {
                        switch(reader.Name)
                        {
                            case "Rows":
                                SettingsModel.Rows = reader.ReadElementContentAsInt();
                                break;

                            case "Columns":
                                SettingsModel.Columns = reader.ReadElementContentAsInt();
                                break;

                            case "AgainstAI":
                                SettingsModel.AgainstAI = reader.ReadElementContentAsBoolean();
                                break;
                        }
                    }
                    return true;
                }
            }
            catch(Exception)
            {
                return false;
            }
        }

        /// <summary>
        /// Writes settings to an xml file.
        /// File path specified in constant SETTINGSFILEPATH.
        /// </summary>
        private void writeSettingsToXML()
        {
            XmlWriterSettings settings = new XmlWriterSettings() { Indent = true, NewLineOnAttributes = true };

            using (XmlWriter writer = XmlWriter.Create(SETTINGSFILEPATH, settings))
            {
                writer.WriteStartDocument();
                writer.WriteComment("This file was autogenerated by Memory. Do not change!");
                writer.WriteStartElement("Settings");

                writer.WriteStartElement("BoardSettings");
                writer.WriteElementString("Rows", SettingsModel.Rows.ToString());
                writer.WriteElementString("Columns", SettingsModel.Columns.ToString());
                writer.WriteEndElement();

                // TODO: Get names for players
                writer.WriteStartElement("PlayerSettings");
                writer.WriteElementString("PlayerOne", "");
                writer.WriteElementString("PlayerTwo", "");
                writer.WriteElementString("AgainstAI", SettingsModel.AgainstAI.ToString());
                writer.WriteEndElement();

                writer.WriteEndElement();
                writer.WriteEndDocument();
            }
        }

        /// <summary>
        /// Handler for closing the main window.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void mainWindowClose(object sender, System.ComponentModel.CancelEventArgs e)
        {
            writeSettingsToXML();
        }
    }
}
