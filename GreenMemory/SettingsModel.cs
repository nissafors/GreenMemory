using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Globalization;

namespace GreenMemory
{
    class SettingsModel
    {
        private const string SETTINGSFILEPATH = "memorySettings.cfg";

        static public int Rows { get; set; }
        static public int Columns { get; set; }
        static public bool AgainstAI { get; set; }
        static public double AILevel { get; set; } // Lower values = harder to beat. 
        static public string CardImagePath { get; set; }
        static public string GameviewBackgroundPath { get; set; }

        /// <summary>
        /// Gets settings from an xml file. 
        /// File path specified in constant SETTINGSFILEPATH.
        /// </summary>
        /// <returns></returns>
        public static bool readSettingsFromFile()
        {
            try
            {
                using (XmlReader reader = XmlReader.Create(SETTINGSFILEPATH))
                {
                    while (reader.Read())
                    {
                        switch (reader.Name)
                        {
                            case "Rows":
                                SettingsModel.Rows = reader.ReadElementContentAsInt();
                                break;

                            case "Columns":
                                SettingsModel.Columns = reader.ReadElementContentAsInt();
                                break;

                            case "AgainstAI":
                                SettingsModel.AgainstAI = reader.ReadElementContentAsBoolean();
                                break;

                            case "AILevel":
                                SettingsModel.AILevel = reader.ReadElementContentAsDouble();
                                break;

                            case "CardImage":
                                SettingsModel.CardImagePath = reader.ReadElementContentAsString();
                                break;

                            case "Background":
                                SettingsModel.GameviewBackgroundPath = reader.ReadElementContentAsString();
                                break;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// Writes settings to an xml file.
        /// File path specified in constant SETTINGSFILEPATH.
        /// </summary>
        public static void writeSettingsToFile()
        {
            XmlWriterSettings settings = new XmlWriterSettings() { Indent = true, NewLineOnAttributes = true };

            using (XmlWriter writer = XmlWriter.Create(SETTINGSFILEPATH, settings))
            {
                writer.WriteStartDocument();
                writer.WriteComment("This file was autogenerated by Memory. Do not change!");
                writer.WriteStartElement("Settings");

                writer.WriteStartElement("BoardSettings");
                writer.WriteElementString("Rows", SettingsModel.Rows.ToString());
                writer.WriteElementString("Columns", SettingsModel.Columns.ToString());
                writer.WriteElementString("CardImage", SettingsModel.CardImagePath);
                writer.WriteElementString("Background", SettingsModel.GameviewBackgroundPath);
                writer.WriteEndElement();

                // TODO: Get names for players
                writer.WriteStartElement("PlayerSettings");
                writer.WriteElementString("PlayerOne", "");
                writer.WriteElementString("PlayerTwo", "");
                writer.WriteElementString("AgainstAI", SettingsModel.AgainstAI.ToString().ToLower());
                writer.WriteElementString("AILevel", SettingsModel.AILevel.ToString(CultureInfo.InvariantCulture));
                writer.WriteEndElement();

                writer.WriteEndElement();
                writer.WriteEndDocument();
            }
        }
    }
}
